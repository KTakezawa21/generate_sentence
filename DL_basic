# -*- coding: utf-8 -*-
"""generate_sentence02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Aav7PjIRPdOW3RVq47DEzHasl_EoarVt
"""

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/MyDrive/[マイドライブのパスを設定]/'

import tensorflow as tf
import numpy as np
import pandas as pd
import os

df = pd.read_excel(path + '[ファイル名].xlsx', sheet_name='[シート名]')
df_question = df['[抽出するカラム名]']
df_question

# GPUを使用するためにデバイスを設定
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
    print('GPU device not found. Using CPU instead.')
    device_name = '/device:CPU:0'

text = ''

for question in df_question:
    text += question + '\n'

print(text)

text = text.lower()
vocab = sorted(set(text))
char_to_idx = {c: i for i, c in enumerate(vocab)}
idx_to_char = np.array(vocab)
text_as_int = np.array([char_to_idx[c] for c in text])
text_as_int

# データセットの作成
seq_length = 100
example_per_epoch = len(text) // (seq_length + 1)
char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)
sequences = char_dataset.batch(seq_length + 1, drop_remainder=True)

# 入力とターゲットの作成
def split_input_target(chunk):
    input_text = chunk[: -1]
    target_text = chunk[1:]
    return input_text, target_text

dataset = sequences.map(split_input_target)

# バッチサイズの設定
BATCH_SIZE = 1
BUFFER_SIZE = 10000
dataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)

# モデルの構築
vocab_size = len(vocab)
embedding_dim = 256
rnn_unit = 1024

def build_model(vocab_size, embedding_dim, rnn_unit, batch_size):
    model = tf.keras.Sequential([
        tf.keras.layers.Embedding(vocab_size, embedding_dim, batch_input_shape=[batch_size, None]),
        tf.keras.layers.LSTM(rnn_unit, return_sequences=True, stateful=True, recurrent_initializer='glorot_uniform'),
        tf.keras.layers.LSTM(rnn_unit, return_sequences=True, stateful=True, recurrent_initializer='glorot_uniform'),
        tf.keras.layers.Dense(vocab_size)
    ])
    return model

print(vocab_size)

model = build_model(vocab_size, embedding_dim, rnn_unit, batch_size=BATCH_SIZE)

initial_learning_rate = 0.001
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate,
    decay_steps=1000,
    decay_rate=0.96,
    staircase=True
)

optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)
# モデルのコンパイル
model.compile(optimizer=optimizer, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True))

# チェックポイントの設定
checkpoint_dir = './training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, 'ckpt_{epoch}')

checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_prefix,
    save_weights_only=True
)

# モデルの学習
EPOCHS = 20
with tf.device(device_name):
    history = model.fit(dataset, epochs=EPOCHS, callbacks=[checkpoint_callback])

# 文章生成
def generate_text(model, start_string, num_generate=1000):
    input_eval = [char_to_idx[s] for s in start_string]
    input_eval = tf.expand_dims(input_eval, 0)
    print(input_eval)
    input_eval = tf.tile(input_eval, [BATCH_SIZE, 1])

    text_generate = []

    model.reset_states()
    for i in range(num_generate):
        print(i)
        predictions = model(input_eval)
        print(predictions)
        predictions = tf.squeeze(predictions, 0)
        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1, 0].numpy()

        text_generate.append(idx_to_char[predicted_id])

    return start_string + ''.join(text_generate)

# 学習済みの重みを読み込む
model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))
# model.build(tf.TensorShape([BATCH_SIZE, None, None]))

# 入力文章
start_sentence = '[ここに入力文章を記載する]'

# 文章生成の実行
with tf.device(device_name):
    generated_text = generate_text(model, start_string=start_sentence)

print(generated_text)
